#include "builtin.h"

#include <unistd.h>
#include <ctype.h>
#include <errno.h> 
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
 
#include "../../rss/rss.h"

#include "../global.h"

#include "../stack/stack.h"
#include "../list/list.h"
#include "../string/string.h"
#include "../virtual/virtual.h"
#include "../int/int.h"

extern int echo;
extern size_t listIndex;

extern void (*p_builtinfun[])(void);

char *eb_setString(char *);
char *eb_findPercent(char *begin);
size_t eb_getNr(char **ptr);

/*
    From push_reg():
  
        This function is called when the return register is to be pushed. The
        return register is used to return information from built-in functions.
  
        {\bf Note that} the {\em count} field of the return register is {\bf
        not} incremented when the register is pushed. The associated memory is
        assigned by internal functions and may be freed by subsequent {\em
        pop}-instructions.
  
        Therefore, also the builtin functions do not have to free the reg's
        memory when assigning a value to reg.
*/

int eb_getCmdLen(char **);
int eb_enterCh(void);

char *eb_getArg(size_t, int *);
char **eb_addCmd(char **, char *);
char **eb_exeCmd(char **, int);
char *eb_getExecArg(size_t, int *);

char *eb_getLine(FILE *file);

void builtin_empty(void);
void builtin_argHead(void);
void builtin_argTail(void);
void builtin_asciiInt(void);
void builtin_asciiString(void);
void builtin_backtick(void);
void builtin_stat(void);
void builtin_putEnv(void);
void builtin_chDir(void);
void builtin_getEnv(void);
void builtin_cmdHead(void);
void builtin_cmdTail(void);
void builtin_changeBase(void);
void builtin_changeExtension(void);
void builtin_changePath(void);
void builtin_fields(void);
void builtin_fgets(void);
void builtin_fprintf(void);
void builtin_getBase(void);
void builtin_getCh(void);
void builtin_getPid(void);
void builtin_gets(void);
void builtin_dotExtension(void);
void builtin_extension(void);
void builtin_path(void);
void builtin_echo(void);
void builtin_element(void);
void builtin_exec(void);
void builtin_exists(void);
void builtin_makeList(void);
void builtin_printf(void);
void builtin_sizeOfList(void);
void builtin_strElement(void);
void builtin_strFind(void);
void builtin_strFormat(void);
void builtin_strLength(void);
void builtin_strLower(void);
void builtin_strUpper(void);
void builtin_subString(void);
void builtin_system(void);
void builtin_trim(void);
void builtin_trimLeft(void);
void builtin_trimRight(void);

int eb_termCh(void);

size_t eb_formattedFprintf(FILE *f, size_t start);

extern void (*p_destWrite)(void *dest, char const *begin, char const *end);

void eb_fileWrite(void *dest, char const *begin, char const *end);
void eb_stringWrite(void *dest, char const *begin, char const *end);

size_t eb_formatter(void *dest, size_t start);
size_t eb_noFormatting(void *dest, size_t start, size_t lastIdx);
void eb_writeArgument(void *dest, size_t idx);


void eb_updateFgets(FILE *inf, char *dest);
void eb_fgetsStatus(char const *status);

int         eb_spawnvp(int mode, char const *prog, char const **argv);
char       *eb_strLower(char *str);
char       *eb_strUpper(char *str);

